#!/usr/bin/env bash
#
# Use https://git.io/vPBwZ to download the latest version of it
# To execute: sh -c "$(wget -O - https://git.io/vPBwZ)"
#

exeOnInstall() {
  arch-chroot /mnt $@
}

# Use colors, but only if connected to a terminal, and that terminal
# supports them.
if which tput >/dev/null 2>&1; then
    ncolors=$(tput colors)
fi
if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
  RED="$(tput setaf 1)"
  GREEN="$(tput setaf 2)"
  YELLOW="$(tput setaf 3)"
  BLUE="$(tput setaf 4)"
  BOLD="$(tput bold)"
  NORMAL="$(tput sgr0)"
else
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  BOLD=""
  NORMAL=""
fi

# Only enable exit-on-error after the non-critical colorization stuff,
# which may fail on systems lacking tput or terminfo
set -e

echo "This will install linux arch with following settings:"
echo "* Install it in UEFI mode"
echo "* partitions with LVM"
echo "  1. partition: UEFI (512 MB)"
echo "  2. partition: SWAP (1.25 times your RAM)"
echo "  3. partition: ROOT (user-defined)"
echo "  4. partition: HOME (user-defined)"
echo "* German keyboard and locale"
echo #
read -p "Are you sure you want that?[yn] " -r
echo    # move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
  exit 1
fi

if [ ! -d "/sys/firmware/efi" ]; then
  printf "${RED}Not booted in UEFI mode! Please reboot with UEFI enabled.${NORMAL}\n"
  exit 1
else
  printf "${GREEN}UEFI mode enabled${NORMAL}\n"
fi

ping -q -c2 archlinux.org > /dev/null
if [ $? -eq 0 ]
then
	printf "${GREEN}Internet available${NORMAL}\n"
else
  printf "${RED}No internet available, please check the connectivity and try again!${NORMAL}\n"
  exit 1
fi

echo #
read -p "Please specify the device to format and install arch on:[/dev/sda] " -r
echo    # move to a new line
installDev="/dev/sda"
if [ ! -z $REPLY ];
then
  installDev=$REPLY
fi

printf "${BLUE}Set german keyboard...${NORMAL}\n"
loadkeys de-latin1

printf "${BLUE}Partition harddisk...${NORMAL}\n"
ramSize=`sed -n -e '/^MemTotal/s/^[^0-9]*//p' /proc/meminfo | grep -o --regexp "[0-9]*"`
swapSize=`expr $ramSize / 4`
swapSize=`expr $ramSize + $swapSize`
swapSize=`expr $swapSize / 1024`
swapSize+="M"
echo "Estimated SWAP size: $swapSize"

sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | gdisk $installDev
  n # new
  1 # first partition
    # default start sector
  +512M # 512 MB UEFI partition
  EF00 # UEFI type
  n # new
  2 # first partition
    # default start sector
  +$swapSize # SWAP size
  8200 # SWAP type
  n # new
  3 # first partition
    # default start sector
    # default end sector (all free space)
  8e00 # linux lvm filesystem
  p # print the in-memory partition table
  w # write the partition table
  y # accept changes
EOF

echo #
read -p "How big should the root partition be:[10G] " -r
echo    # move to a new line
rootPartSize="10G"
if [ ! -z $REPLY ];
then
  rootPartSize=$REPLY
fi

pvcreate ${installDev}3
vgcreate lvm ${installDev}3
lvcreate --name root -L${rootPartSize} lvm # root partition
lvcreate --name home -l100%FREE lvm  # home partition
lvscan

printf "${BLUE}Format partitions...${NORMAL}\n"

mkfs.fat -F 32 ${installDev}1
mkswap -L swap ${installDev}2
mkfs.ext4 -L root /dev/lvm/root
mkfs.ext4 -L home /dev/lvm/home

printf "${BLUE}Mount partitions...${NORMAL}\n"

mount /dev/lvm/root /mnt # root
mkdir -p /mnt/home
mount /dev/lvm/home /mnt/home # home
mkdir -p /mnt/boot
mount ${installDev}1 /mnt/boot # EFI

swapon -L swap

printf "${BLUE}Install Arch linux to disk...${NORMAL}\n"
mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
wget -O /etc/pacman.d/mirrorlist "https://www.archlinux.org/mirrorlist/?country=DE&protocol=https&ip_version=4&ip_version=6&use_mirror_status=on"
sed -i "/^#Server/s/^#//" /etc/pacman.d/mirrorlist

pacstrap /mnt base base-devel

printf "${BLUE}Generate fstab...${NORMAL}\n"
genfstab -Lp /mnt > /mnt/etc/fstab
cat /mnt/etc/fstab

printf "${BLUE}Config system...${NORMAL}\n"
echo #
read -p "Hostname: [arch]" -r
echo    # move to a new line
hostname="arch"
if [ ! -z $REPLY ];
then
  hostname=$REPLY
fi

echo $hostname > /mnt/etc/hostname

echo "LANG=de_DE.UTF-8" > /mnt/etc/locale.conf
echo "LC_COLLATE=C" >> /mnt/etc/locale.conf
echo "LANGUAGE=de_DE" >> /mnt/etc/locale.conf

echo "KEYMAP=de-latin1" > /mnt/etc/vconsole.conf
echo "FONT=lat9w-16" >> /mnt/etc/vconsole.conf

exeOnInstall ln -s /usr/share/zoneinfo/Europe/Berlin /etc/localtime

cp /mnt/etc/locale.gen /mnt/etc/locale.gen.bak
sed -i "/^#de_DE.UTF-8/s/^#//" /mnt/etc/locale.gen
sed -i "/^#de_DE\sISO-8859-1/s/^#//" /mnt/etc/locale.gen
sed -i "/^#en_US.UTF-8/s/^#//" /mnt/etc/locale.gen
exeOnInstall locale-gen

cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist

exeOnInstall pacman -Syy

#make the group wheel ready to use with sudo
sed -i "/%wheel\sALL=(ALL)\sALL/s/^#//" /mnt/etc/sudoers
#make a proxy available for sudo
echo "Defaults env_keep += \"http_proxy\"" >> /mnt/etc/sudoers
echo "Defaults env_keep += \"https_proxy\"" >> /mnt/etc/sudoers

printf "${BLUE}Install kernel...${NORMAL}\n"
sed -i "/^HOOKS/s/block\sfilesystems/block lvm2 filesystems/" /mnt/etc/mkinitcpio.conf
exeOnInstall mkinitcpio -p linux

printf "${BLUE}Set root password...${NORMAL}\n"
echo #
read -s -p "Root password:[arch] " -r
echo    # move to a new line
rootPass="arch"
if [ ! -z $REPLY ];
then
  rootPass=$REPLY
fi

sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | exeOnInstall passwd
  $rootPass # password
  $rootPass # second time
EOF

printf "${BLUE}Install GRUB...${NORMAL}\n"
echo 'y' | exeOnInstall pacman -S grub efibootmgr

exeOnInstall grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub
exeOnInstall grub-mkconfig -o /boot/grub/grub.cfg

umount /mnt/boot
umount /mnt/home
umount /mnt

printf "${BLUE}Installed basic system.\nPlease reboot now to switch to your fresh arch linux.${NORMAL}\n"

#!/usr/bin/env bash

saveProgress() {
  if [ -f $(basename "$0") ]; then
    if [ -z "$1" ]; then
      sed -i "/^\s*${FUNCNAME[ 1 ]}\$/s/^#*/#/" $(basename "$0")
    else
      sed -i "/^\s*${FUNCNAME[ 1 ]}\s+$1.*\$/s/^#*/#/" $(basename "$0")
    fi
  fi
}

exeOnInstall() {
  arch-chroot /mnt "$@"
}

partitionHarddrive() {
  echo #
  read -p "Please specify the device to format and install arch on:[/dev/sda] " -r
  echo    # move to a new line
  installDev="/dev/sda"
  if [ ! -z $REPLY ];
  then
    installDev=$REPLY
  fi

  printf "${BLUE}Partition harddisk...${NORMAL}\n"

  if [ ! -e "${installDev}/sda3" ]; then

    ramSize=`sed -n -e '/^MemTotal/s/^[^0-9]*//p' /proc/meminfo | grep -o --regexp "[0-9]*"`
    swapSize=`expr $ramSize / 4`
    swapSize=`expr $ramSize + $swapSize`
    swapSize=`expr $swapSize / 1024`
    swapSize+="M"
    echo "Estimated SWAP size: $swapSize"

    sed -e 's/\s*\([\+0-9a-zA-Z]*\).*/\1/' << EOF | gdisk $installDev
      n # new
      1 # first partition
        # default start sector
      +512M # 512 MB UEFI partition
      EF00 # UEFI type
      n # new
      2 # first partition
        # default start sector
      +$swapSize # SWAP size
      8200 # SWAP type
      n # new
      3 # first partition
        # default start sector
        # default end sector (all free space)
      8e00 # linux lvm filesystem
      p # print the in-memory partition table
      w # write the partition table
      y # accept changes
EOF

    echo #
    read -p "How big should the root partition be:[10G] " -r
    echo    # move to a new line
    rootPartSize="10G"
    if [ ! -z $REPLY ];
    then
      rootPartSize=$REPLY
    fi

    pvcreate ${installDev}3
    vgcreate lvm ${installDev}3
    lvcreate --name root -L${rootPartSize} lvm # root partition
    lvcreate --name home -l100%FREE lvm  # home partition
    lvscan
  else
    printf "${YELLOW}Existing partitions. Please make sure to have them in following order:${NORMAL}\n"
    echo "${installDev}/sda1 - efi boot partition"
    echo "${installDev}/sda2 - swap partition"
    echo "${installDev}/sda3 - lvm partition (lvm/root + lvm/home)"
    echo "press enter to continue"
    read -r
  fi

  printf "${BLUE}Format partitions...${NORMAL}\n"

  mkfs.fat -F 32 ${installDev}1
  mkswap -L swap ${installDev}2
  mkfs.ext4 -L root /dev/lvm/root
  mkfs.ext4 -L home /dev/lvm/home

  printf "${BLUE}Mount partitions...${NORMAL}\n"

  mount /dev/lvm/root /mnt # root
  mkdir -p /mnt/home
  mount /dev/lvm/home /mnt/home # home
  mkdir -p /mnt/boot
  mount ${installDev}1 /mnt/boot # EFI

  swapon -L swap

  saveProgress
}

installArch() {
  printf "${BLUE}Update german mirrorlist...${NORMAL}\n"
  mv /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
  wget -O /etc/pacman.d/mirrorlist "https://www.archlinux.org/mirrorlist/?country=DE&protocol=https&ip_version=4&ip_version=6&use_mirror_status=on"
  sed -i "/^#Server/s/^#//" /etc/pacman.d/mirrorlist

  printf "${BLUE}Install Arch linux to disk...${NORMAL}\n"
  pacstrap /mnt base base-devel

  printf "${BLUE}Generate fstab...${NORMAL}\n"
  genfstab -Lp /mnt | tee /mnt/etc/fstab

  printf "${BLUE}Config system...${NORMAL}\n"
  echo #
  read -p "Hostname: [arch]" -r
  echo    # move to a new line
  hostname="arch"
  if [ ! -z $REPLY ];
  then
    hostname=$REPLY
  fi

  saveProgress
}

setupSystem() {
  echo $hostname | tee /mnt/etc/hostname

  printf "${BLUE}Setup german keyboard...${NORMAL}\n"
  echo "KEYMAP=de-latin1" | tee /mnt/etc/vconsole.conf
  echo "FONT=lat9w-16" | tee -a /mnt/etc/vconsole.conf

  printf "${BLUE}Setup german locale...${NORMAL}\n"
  echo "LANG=de_DE.UTF-8" | tee /mnt/etc/locale.conf
  echo "LC_COLLATE=C" | tee -a /mnt/etc/locale.conf
  echo "LANGUAGE=de_DE" | tee -a /mnt/etc/locale.conf

  cp /mnt/etc/locale.gen /mnt/etc/locale.gen.bak
  sed -i "/^#de_DE.UTF-8/s/^#//" /mnt/etc/locale.gen
  sed -i "/^#de_DE\sISO-8859-1/s/^#//" /mnt/etc/locale.gen
  sed -i "/^#en_US.UTF-8/s/^#//" /mnt/etc/locale.gen
  exeOnInstall locale-gen

  printf "${BLUE}Setup timezone...${NORMAL}\n"
  exeOnInstall ln -s /usr/share/zoneinfo/Europe/Berlin /etc/localtime

  printf "${BLUE}Copy mirrorlist to installed system...${NORMAL}\n"
  cp /etc/pacman.d/mirrorlist /mnt/etc/pacman.d/mirrorlist

  printf "${BLUE}Add 'wheel' to sudoers file...${NORMAL}\n"
  #make the group wheel ready to use with sudo
  sed -i "/%wheel\sALL=(ALL)\sALL/s/^#//" /mnt/etc/sudoers

  saveProgress
}

installKernel() {
  printf "${BLUE}Install kernel...${NORMAL}\n"
  sed -i "/^HOOKS/s/block\sfilesystems/block lvm2 filesystems/" /mnt/etc/mkinitcpio.conf
  exeOnInstall mkinitcpio -p linux

  saveProgress
}

installGrub() {
  printf "${BLUE}Install GRUB...${NORMAL}\n"
  exeOnInstall pacman --noconfirm -S grub efibootmgr

  exeOnInstall grub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub
  exeOnInstall grub-mkconfig -o /boot/grub/grub.cfg
  mkdir -p /mnt/boot/EFI/BOOT
  cp /mnt/boot/EFI/grub/grubx64.efi /mnt/boot/EFI/BOOT/BOOTX64.EFI

  saveProgress
}

installBasics() {
  printf "${BLUE}Install basic programs and DHCP...${NORMAL}\n"
  exeOnInstall pacman --noconfirm -S wget curl git dmidecode

  networkInterface=$(ls /sys/class/net | grep -m1 "en.*")
  printf "Enable DHCP for ${YELLOW}$networkInterface${NORMAL}\n"
  exeOnInstall systemctl enable dhcpcd@$networkInterface

  if [ -n "$http_proxy" ]; then
    #make a proxy available for sudo
    echo "Defaults env_keep += \"http_proxy\"" | tee -a /mnt/etc/sudoers
    echo "Defaults env_keep += \"https_proxy\"" | tee -a /mnt/etc/sudoers

    printf "${BLUE}Put proxy into /etc/profile for bash...${NORMAL}\n"
    echo "export http_proxy=$http_proxy" | sudo tee -a /mnt/etc/profile
    echo "export https_proxy=$https_proxy" | sudo tee -a /mnt/etc/profile
  fi

  saveProgress
}

enableMultilib() {
  printf "${BLUE}Enable multilib repository...${NORMAL}\n"
  sed -i "s|^#\[multilib\]|[multilib]\nInclude = /etc/pacman.d/mirrorlist|" /mnt/etc/pacman.conf
}

setupUsers() {
  printf "${BLUE}Set root password...${NORMAL}\n"
  exeOnInstall passwd

  printf "${BLUE}Setup non-root user...${NORMAL}\n"
  read -p "Username of new user:[archi] " -r
  echo    # move to a new line
  userName="archi"
  if [ ! -z $REPLY ];
  then
    userName=$REPLY
  fi

  exeOnInstall useradd -m -G wheel "$userName"
  exeOnInstall passwd "$userName"
  printf "Created non-root user: ${YELLOW}$userName${NORMAL}\n"

  printf "${BLUE}Disable root login...${NORMAL}\n"
  passwd -l root

  saveProgress
}

configPacman() {
  printf "${BLUE}Config pacman colors...${NORMAL}\n"
  sed -i "/^#Color/s/^#//" /mnt/etc/pacman.conf
  sed -i "/^#\sMisc\soptions/aILoveCandy" /mnt/etc/pacman.conf

  saveProgress
}

downloadToolScript() {
  wget -O /mnt/home/$userName/arch_tool_setup https://git.io/vPzYA
  exeOnInstall chown $userName:$userName /home/$userName/arch_tool_setup
  exeOnInstall chmod u+x /home/$userName/arch_tool_setup

  saveProgress
}

# Use colors, but only if connected to a terminal, and that terminal
# supports them.
if which tput >/dev/null 2>&1; then
    ncolors=$(tput colors)
fi
if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
  RED="$(tput setaf 1)"
  GREEN="$(tput setaf 2)"
  YELLOW="$(tput setaf 3)"
  BLUE="$(tput setaf 6)"
  BOLD="$(tput bold)"
  NORMAL="$(tput sgr0)"
else
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  BOLD=""
  NORMAL=""
fi

# Only enable exit-on-error after the non-critical colorization stuff,
# which may fail on systems lacking tput or terminfo
set -e

echo "This will install linux arch with following settings:"
echo "* Install it in UEFI mode"
echo "* partitions with LVM"
echo "  1. partition: UEFI (512 MB)"
echo "  2. partition: SWAP (1.25 times your RAM)"
echo "  3. partition: ROOT (user-defined)"
echo "  4. partition: HOME (user-defined)"
echo "* Setup german locale"
echo "* Enable multilib repository"
echo "* Creates working user and disables root login"
echo "* Installs grub"
echo #
read -p "Are you sure you want that?[yn] " -r
echo    # move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
  exit 1
fi

if [ ! -d "/sys/firmware/efi" ]; then
  printf "${RED}Not booted in UEFI mode! Please reboot with UEFI enabled.${NORMAL}\n"
  exit 1
else
  printf "${GREEN}UEFI mode enabled${NORMAL}\n"
fi

ping -q -c2 archlinux.org > /dev/null
if [ $? -eq 0 ]
then
	printf "${GREEN}Internet available${NORMAL}\n"
else
  printf "${RED}No internet available, please check the connectivity and try again!${NORMAL}\n"
  exit 1
fi

partitionHarddrive
installArch
setupSystem
installKernel
installGrub
installBasics
enableMultilib
setupUsers
configPacman
downloadToolScript

umount /mnt/boot
umount /mnt/home
umount /mnt

printf "${YELLOW}Installed basic system.\nPlease reboot now to switch to your fresh arch linux.${NORMAL}\n"

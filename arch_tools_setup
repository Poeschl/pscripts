#!/usr/bin/env bash
#
#
# Todos:
#  + add note what to do manually
#

silentpacman() {
  sudo pacman --noconfirm $@
}

silentpacaur() {
  pacaur --aur --noconfirm --noedit $@
}

installPackage() {
  printf "${BLUE}Install $@...${NORMAL}\n"
  silentpacman --needed -S $@

  saveProgress $@
}

installAurPackage() {
  printf "${BLUE}Install $@...${NORMAL}\n"
  silentpacaur --needed -y $@

  saveProgress $@
}

saveProgress() {
  if [ -f $(basename "$0") ]; then
    if [ -z "$1" ]; then
      sed -i "/^\s*${FUNCNAME[ 1 ]}\$/s/^#*/#/" $(basename "$0")
    else
      sed -i "/^\s*${FUNCNAME[ 1 ]}\s+$1.*\$/s/^#*/#/" $(basename "$0")
    fi
  fi
}

installPacaur() {
  printf "${BLUE}Install pacaur...${NORMAL}\n"

  if [ -z "$(pacman -Qs pacaur)" ]; then
    mkdir -p pacaur_install
    cd pacaur_install
    # Install pacaur dependencies from arch repos
    silentpacman -S expac yajl git

    # Install "cower" from AUR
    curl -o PKGBUILD https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=cower
    makepkg PKGBUILD --skippgpcheck
    silentpacman -U cower*.tar.xz

    # Install "pacaur" from AUR
    curl -o PKGBUILD https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=pacaur
    makepkg PKGBUILD
    silentpacman -U pacaur*.tar.xz

    cd ..
    rm -rf pacaur_install
  fi

  saveProgress
}


installZsh() {
  printf "${BLUE}Install oh-my-zsh with plugins...${NORMAL}\n"
  if [ ! -f .zshrc ]; then
    silentpacman -S zsh zsh-completions
    wget -O oh-my-zsh https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh
    sudo chmod u+x oh-my-zsh
    sed -i "/env\szsh/d" oh-my-zsh
    sed -i "/\s*chsh/d" oh-my-zsh

    ./oh-my-zsh
    sed -i "/^ZSH_THEME/s/\".*\"/\"gentoo\"/" ~/.zshrc
    sed -i "/^plugins/s/(.*)/(git sudo adb gradle archlinux history)/" ~/.zshrc
    mkdir -p bin
    echo "export PATH=$HOME/bin:\$PATH%" | tee ~/.zshenv

    if [ -n "$http_proxy" ]; then
      printf "${BLUE}Add proxy to default zsh profile...${NORMAL}\n"
      echo "export http_proxy=$http_proxy" | sudo tee -a /etc/zsh/zshenv
      echo "export https_proxy=$https_proxy" | sudo tee -a /etc/zsh/zshenv
    fi

    #set zsh as default
    sudo chsh -s $(grep /zsh$ /etc/shells | tail -1)

    echo "alias sudo='sudo '" | sudo tee -a /etc/zsh/zshenv

    #set alias to prevent official package actions through pacaur.
    #Personal setting
    echo "alias pacaur='pacaur --aur '" | sudo tee -a /etc/zsh/zshenv

    rm -rf oh-my-zsh

  else
    printf "${YELLOW}oh-my-zsh already there, using exiting one.${NORMAL}\n"
  fi

  saveProgress
}

installReflektor() {
  printf "${BLUE}Install Reflector...${NORMAL}\n"
  #Reflector for mirrorlist refreshing
  sudo cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
  silentpacaur -S reflector-timer-weekly

  echo "Setup german filter for mirrorlist"
  sudo sed -i '/--country/d' /etc/reflector.conf
  echo "--country Germany" | sudo tee -a /etc/reflector.conf

  echo "Enable reflector service"
  sudo systemctl enable reflector.timer

  saveProgress
}

installNano(){
  printf "${BLUE}Install nano...${NORMAL}\n"
  silentpacman -S nano
  echo "export EDITOR=usr/bin/nano" | sudo tee -a /etc/zsh/zshenv

  saveProgress
}

configureNTP() {
  printf "${BLUE}Install and configure NTP...${NORMAL}\n"
  silentpacman -S ntp

  echo "Set german ntp server."
  sudo sed -i.bak '/server/d' /etc/ntp.conf
  echo "server 0.de.pool.ntp.org" | sudo tee -a /etc/ntp.conf
  echo "server 1.de.pool.ntp.org" | sudo tee -a /etc/ntp.conf
  echo "server 2.de.pool.ntp.org" | sudo tee -a /etc/ntp.conf
  echo "server 3.de.pool.ntp.org" | sudo tee -a /etc/ntp.conf

  echo "Restrict machine from being a ntp server."
  #prevent the machine from being a time server
  sudo sed -i.bak '/restrict/d' /etc/ntp.conf
  echo "restrict default nomodify nopeer" | sudo tee -a /etc/ntp.conf
  echo "restrict 127.0.0.1" | sudo tee -a /etc/ntp.conf

  echo "Enable ntp service"
  sudo systemctl enable ntpd.service

  time=$(date)
  printf "Current time: ${YELLOW}$time${NORMAL}\n"

  saveProgress
}

installBasicServiceDrivers() {
  printf "${BLUE}Install basic services and drivers...${NORMAL}\n"
  silentpacman -S acpid cups mesa-libgl avahi pulseaudio

  echo "Enable services"
  sudo systemctl enable acpid.service
  sudo systemctl enable avahi-daemon.service
  sudo systemctl enable org.cups.cupsd.service

  saveProgress
}

installLightdm() {
  printf "${BLUE}Install lightdm and gtk-greeter...${NORMAL}\n"
  silentpacman -S lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings
  sudo systemctl enable lightdm.service

  saveProgress
}

installCinnamon() {
  printf "${BLUE}Install Cinnamon...${NORMAL}\n"
  silentpacman -S cinnamon gnome-terminal

  saveProgress
}

installXfce() {
  printf "${BLUE}Install xfce...${NORMAL}\n"
  silentpacman -S xfce4 xfce4-whiskermenu-plugin nemo light-locker
  silentpacaur -S menulibre

  printf "${BLUE}Install mugshot...${NORMAL}\n"
  #mugshot is outdated in aur, so manually
  silentpacman -S python-pexpect python-dbus python-cairo accountsservice
  mugshotTemp="mugshot-temp"
  mkdir -p $mugshotTemp
  cd $mugshotTemp
  git clone https://github.com/fhdk/mugshot.git
  cd mugshot
  makepkg
  pacman -U mugshot-*.pkg.tar.xz
  cd
  rm -rf $mugshotTemp

  saveProgress
}

installMaterialtheme(){
  if [ -z "$(pacman -Qs adapta-gtk-theme)" ]; then
    printf "${BLUE}Install Material Look...${NORMAL}\n"
    silentpacaur -S paper-icon-theme-git adapta-gtk-theme ttf-roboto
  fi

  printf "${BLUE}Setup Material Look...${NORMAL}\n"

  printf "${BLUE}Setup Material Look for lightdm greeter...${NORMAL}\n"
  sudo sed -i "/^#user-background/s/$/true/" /etc/lightdm/lightdm-gtk-greeter.conf
  sudo sed -i "/^#theme-name/s/$/Adapta-Nokto/" /etc/lightdm/lightdm-gtk-greeter.conf
  sudo sed -i "/^#icon-theme-name/s/$/Paper/" /etc/lightdm/lightdm-gtk-greeter.conf
  sudo sed -i "/^#font-name/s/$/Roboto 10/" /etc/lightdm/lightdm-gtk-greeter.conf
  sudo sed -i "/^#background/s/$/\/usr\/share\/backgrounds\/Arch\/arch-linux-dark-colored.png/" /etc/lightdm/lightdm-gtk-greeter.conf

  sudo sed -i "/^#user-background/s/^#//" /etc/lightdm/lightdm-gtk-greeter.conf
  sudo sed -i "/^#theme-name/s/^#//" /etc/lightdm/lightdm-gtk-greeter.conf
  sudo sed -i "/^#icon-theme-name/s/^#//" /etc/lightdm/lightdm-gtk-greeter.conf
  sudo sed -i "/^#font-name/s/^#//" /etc/lightdm/lightdm-gtk-greeter.conf
  sudo sed -i "/^#background/s/^#//" /etc/lightdm/lightdm-gtk-greeter.conf
  sudo sed -i "\$aposition=50%,center -10,end" /etc/lightdm/lightdm-gtk-greeter.conf

  if [ ! -z "$(pacman -Qs cinnamon)" ]; then
    gsettings set org.cinnamon.desktop.interface icon-theme 'Paper'
    gsettings set org.cinnamon.desktop.interface cursor-theme "Adapta-Nokto"
    gsettings set org.cinnamon.desktop.interface gtk-theme "Adapta-Nokto"
    gsettings set org.cinnamon.desktop.wm.preferences theme "Adapta-Nokto"
    gsettings set org.cinnamon.theme name "Adapta-Nokto"
    gsettings set org.cinnamon.settings-daemon.plugins.xsettings menus-have-icons "true"

    gsettings set org.cinnamon.desktop.interface font-name "Roboto 9"
    gsettings set org.nemo.desktop font "Roboto 10"
    gsettings set org.gnome.desktop.interface document-font-name "Roboto 11"
    gsettings set org.cinnamon.desktop.wm.preferences titlebar-font "Roboto Bold 11"

    gsettings set org.cinnamon.desktop.wm.preferences button-layout "appmenu:minimize,maximize,close"

  fi

  if [ ! -z "$(pacman -Qs xfdesktop)" ]; then

      xfconf-query --create -t "string" --channel xsettings --property /Net/IconThemeName --set "Paper"
      xfconf-query --create -t "string" --channel xsettings --property /Net/ThemeName --set "Adapta-Nokto"
      xfconf-query --create -t "string" --channel xfwm4 --property /general/theme --set "Adapta-Nokto"
      xfconf-query --create -t "string" --channel xsettings --property /Gtk/CursorThemeName --set "Paper"

      xfconf-query --create -t "string" --channel xfwm4 --property /general/button_layout --set "|HMC"
      xfconf-query --create -t bool --channel xsettings --property /Gtk/ButtonImages --set false

      xfconf-query --create -t "string" --channel xsettings --property /Gtk/FontName --set "Roboto 10"
      xfconf-query --create -t "string" --channel xfwm4 --property /general/title_font --set "Roboto Bold 11"

      if [ ! -z "$(pacman -Qs compiz)" ]; then
        gsettings set org.gnome.desktop.wm.preferences theme "Adapta-Nokto"
        gsettings set org.gnome.desktop.wm.preferences titlebar-font "Roboto Bold 11"
        gsettings set org.gnome.desktop.wm.preferences button-layout "appmenu:minimize,maximize,close"
      fi
    #Todo add panel config from xfconf
  fi

  #general settings
  printf "[Settings]\ngtk-application-prefer-dark-theme=true" | tee ~/.config/gtk-3.0/settings.ini

  saveProgress
}

  configXEnvironment() {
    printf "${BLUE}Set german keyboard layout for X...${NORMAL}\n"
    sudo localectl set-x11-keymap de pc105 nodeadkeys

    printf "${BLUE}Download background...${NORMAL}\n"
    sudo mkdir -p /usr/share/backgrounds/Arch
    sudo wget -O "/usr/share/backgrounds/Arch/arch-linux-dark.png" "http://orig05.deviantart.net/e2d8/f/2010/255/2/5/arch_linux_bw_wallpaper_by_thales_img-d2yl9ul.png"
    sudo wget -O "/usr/share/backgrounds/Arch/arch-linux-dark-colored.png" "http://orig05.deviantart.net/60cc/f/2016/234/f/2/arch_linux_wallpaper_dark_by_kjeksomanen-d4a70zy.png"
    sudo wget -O "/usr/share/backgrounds/Arch/arch-linux-wall.png" "http://orig11.deviantart.net/9331/f/2015/256/2/1/archwall_by_localizator-d99ipen.png"


    if [ ! -z "$(pacman -Qs cinnamon)" ]; then
      printf "${BLUE}Enable NetworkManager...${NORMAL}\n"
      sudo systemctl enable NetworkManager.service

      if [ -n "$http_proxy" ]; then
        printf "${BLUE}Setup proxy for NetworkManager...${NORMAL}\n"
        gsettings set org.gnome.system.proxy mode 'manual'
        echo $http_proxy | while IFS=: read protocol ip port; do
          gsettings set org.gnome.system.proxy.http host "${protocol}:${ip}"
          gsettings set org.gnome.system.proxy.http port "$port"
          gsettings set org.gnome.system.proxy.https host "${protocol}:${ip}"
          gsettings set org.gnome.system.proxy.https port "$port"
        done
      fi

      printf "${BLUE}Config visual appearence...${NORMAL}\n"
      gsettings set org.nemo.desktop desktop-layout "true::true"
      gsettings set org.nemo.desktop trash-icon-visible "true"
      gsettings set org.nemo.desktop volumes-visible "true"
      gsettings set org.nemo.desktop show-orphaned-desktop-icons "true"

      printf "${BLUE}Set background...${NORMAL}\n"
      gsettings set org.cinnamon.desktop.background picture-uri  "file:////usr/share/backgrounds/Arch/arch-linux-dark.png"

      printf "<?xml version=\"1.0\"?>\<!DOCTYPE wallpapers SYSTEM \"cinnamon-wp-list.dtd\">\n
      <wallpapers>\n
      <wallpaper deleted="false">\n
      <name>Arch Linux Dark</name>\n
      <filename>/usr/share/backgrounds/Arch/arch-linux-dark.png</filename>\n
      <options>zoom</options>\n
      <shade_type>solid</shade_type>\n
      <pcolor>#000000</pcolor>\n
      <scolor>#000000</scolor>\n
      </wallpaper>\n
      <wallpaper deleted="false">\n
      <name>Arch Linux Dark Colored</name>\n
      <filename>/usr/share/backgrounds/Arch/arch-linux-dark-colored.png</filename>\n
      <options>zoom</options>\n
      <shade_type>solid</shade_type>\n
      <pcolor>#000000</pcolor>\n
      <scolor>#000000</scolor>\n
      </wallpaper>\n
      <wallpaper deleted="false">\n
      <name>Arch Linux Wall</name>\n
      <filename>/usr/share/backgrounds/Arch/arch-linux-wall.png</filename>\n
      <options>zoom</options>\n
      <shade_type>solid</shade_type>\n
      <pcolor>#000000</pcolor>\n
      <scolor>#000000</scolor>\n
      </wallpaper>\n
      </wallpapers>\n" | sudo tee /usr/share/cinnamon-background-properties/linuxarch.xml

    fi

    if [ ! -z "$(pacman -Qs xfdesktop)" ]; then
      printf "${BLUE}Set background...${NORMAL}\n"
      xfconf-query --create -t "string" --channel xfce4-desktop --property /backdrop/screen0/monitor0/workspace0/last-image  --set "/usr/share/backgrounds/Arch/arch-linux-wall.png"

      printf "${BLUE}Remove unkown devices from desktop...${NORMAL}\n"
      xfconf-query --create -t bool --channel xfce4-desktop --property /desktop-icons/file-icons/show-unknown-removable --set false

      printf "${BLUE}Setup shortcuts...${NORMAL}\n"
      xfconf-query --create -t string --channel xfce4-keyboard-shortcuts --property "/commands/custom/<Primary><Alt>t" --set "exo-open --launch TerminalEmulator"
      xfconf-query --create -t string --channel xfce4-keyboard-shortcuts --property "/commands/custom/<Alt>F1" --set "xfce4-popup-whiskermenu"

      printf "${BLUE}Setup user switching...${NORMAL}\n"
      printf "#!/bin/sh\n/usr/bin/dm-tool switch-to-greeter" | sudo tee /usr/bin/gdmflexiserver
      sudo chmod ugo+x /usr/bin/gdmflexiserver

      printf "${BLUE}Setup screenlocking and screensaver...${NORMAL}\n"
      printf "#!/bin/bash\nlight-locker-command -l" | sudo tee /usr/local/bin/xflock4

      printf "${BLUE}Setup xfce panels...${NORMAL}\n"
      wget -O "~/.config/xfce4/xfconf/xfce-perchannel-xml/xfce4-panel.xml" "https://raw.githubusercontent.com/Poeschl/pscripts/arch-install/res/xfce4-panel.xml"
      wget -O "~/.config/xfce4/panel/whiskermenu-16.rc" "https://raw.githubusercontent.com/Poeschl/pscripts/arch-install/res/whiskermenu-16.rc"

    fi

    saveProgress
  }

installCompiz() {
  printf "${BLUE}Install Compiz...${NORMAL}\n"
  silentpacaur -S compiz

  echo "compiz --replace &" | sudo tee -a /etc/xprofile

  saveProgress
}

installVirtualBoxext(){
  printf "${BLUE}Install Virtualbox Additions...${NORMAL}\n"
  silentpacman -S virtualbox-guest-modules-arch virtualbox-guest-utils
  sudo systemctl enable vboxservice.service
  sudo gpasswd -a $userName vboxsf

  saveProgress
}

installAndroidSdk() {
  printf "${BLUE}Install Android-SDK...${NORMAL}\n"
  silentpacaur -S android-sdk
  sudo groupadd androidsdk
  sudo gpasswd -a $userName androidsdk
  sudo chown -R :androidsdk /opt/android-sdk/
  sudo chmod -R g+w /opt/android-sdk/
  export ANDROID_HOME=/opt/android-sdk
  echo "export ANDROID_HOME=$ANDROID_HOME" | tee -a ~/.zshenv

  if [ -n "$http_proxy" ]; then
    #split address
    mkdir -p ~/.android/
    touch ~/.android/androidtool.cfg
    echo $http_proxy | while IFS=: read protocol ip port; do
        echo "http.proxyHost=${protocol}:${ip}" | tee -a ~/.android/androidtool.cfg
        echo "http.proxyPort=$port" | tee -a ~/.android/androidtool.cfg
    done
  fi

  echo "y" | $ANDROID_HOME/tools/android update sdk --no-ui

  saveProgress
}

installAdb() {
  printf "${BLUE}Install ADB...${NORMAL}\n"
  silentpacman -S android-tools
  #sudo gpasswd -a $userName adbusers

  saveProgress
}


cleanup() {
  printf "${BLUE}Remove unused packages and files...${NORMAL}\n"
  if [ ! -z "$(pacman -Qtdq)" ]; then
    silentpacman -Rs $(pacman -Qtdq)
  fi

  printf "${BLUE}Remove not needed menu entries...${NORMAL}\n"
  [ -f "/usr/share/applications/qv*.desktop" ] && sudo rm /usr/share/applications/qv*.desktop
  [ -f "/usr/share/applications/electron.desktop" ] && sudo sed -i "\$aNoDisplay=true" /usr/share/applications/electron.desktop
  [ -f "/usr/share/applications/avahi-discover.desktop" ] && sudo sed -i "\$aNoDisplay=true" /usr/share/applications/avahi-discover.desktop
  [ -f "/usr/share/applications/bssh.desktop" ] && sudo sed -i "\$aNoDisplay=true" /usr/share/applications/bssh.desktop
  [ -f "/usr/share/applications/bvnc.desktop" ] && sudo sed -i "\$aNoDisplay=true" /usr/share/applications/bvnc.desktop

  saveProgress
}

installPScripts(){
  printf "${BLUE}Install pscripts...${NORMAL}\n"
  sh -c "$(wget https://raw.githubusercontent.com/Poeschl/pscripts/master/tools/install.sh -O -)"

  saveProgress
}

setPresets(){
  printf "${YELLOW}Copy preset compiz profile to desktop...${NORMAL}\n"
  mkdir -p ~/Desktop
  wget -O ~/Desktop/Compiz.profile "https://raw.githubusercontent.com/Poeschl/pscripts/arch-install/res/Compiz.profile"

  if [ ! -z "$(pacman -Qs xfdesktop)" ]; then
    printf "${BLUE}Set nemo as default...${NORMAL}\n"
    printf "#!/usr/bin/env bash\nexo-preferred-applications\nxfce4-session-logout" | tree "~/Desktop/set_default_apps"
    if [ ! -z "$(pacman -Qs xdg-mime)" ]; then
      sudo xdg-mime default nemo.desktop inode/directory application
    fi
    [ -f "~/.local/share/applications/mimeapps.list" ] && sudo sed -i "s/thunar.desktop/nemo.desktop" ~/.local/share/applications/mimeapps.list
    gsettings set org.nemo.desktop show-desktop-icons false
  fi

  # printf "${BLUE}Set default avator for user picture...${NORMAL}\n"
  # cp /usr/share/icons/Paper/48x48/status/avatar-default.png ~/.xface

  saveProgress
}

# Use colors, but only if connected to a terminal, and that terminal
# supports them.
if which tput >/dev/null 2>&1; then
    ncolors=$(tput colors)
fi
if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
  RED="$(tput setaf 1)"
  GREEN="$(tput setaf 2)"
  YELLOW="$(tput setaf 3)"
  BLUE="$(tput setaf 6)"
  BOLD="$(tput bold)"
  NORMAL="$(tput sgr0)"
else
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  BOLD=""
  NORMAL=""
fi

# Only enable exit-on-error after the non-critical colorization stuff,
# which may fail on systems lacking tput or terminfo
set -e

echo "This will install some tools on your system:"
echo "* Creates user and disable root from login"
echo "* pacaur"
echo "* zShell + oh-my-zsh"
echo "* Virtualbox extensions (optional)"
echo "* System tools"
echo "* Desktop Environment"
echo "* Development Environment"

read -p "Are you sure you want that? [yn] " -r
echo    # move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]];
then
  exit 1
fi

userName=$(whoami)
printf "Current user: ${YELLOW}$userName${NORMAL}\n"
cd ~

printf "${RED}It is needed to get root rights for most of the following tasks!${NORMAL}\n"
sudo echo "" > /dev/null

if [ -z "$(sudo dmidecode | grep -i Virtualbox)" ];
then
  inVM=0
else
  inVM=1
fi

ping -q -c2 archlinux.org > /dev/null
if [ $? -eq 0 ];
then
	printf "${GREEN}Internet available${NORMAL}\n"
else
  printf "${RED}No internet available, please check the connectivity and try again!${NORMAL}\n"
  exit 1
fi

# Temp raise of the /tmp/ folder size to 2GiB
sudo mount -o remount,size=2G,noatime /tmp

printf "${BLUE}Sync packages database...${NORMAL}\n"
silentpacman -Syy

installZsh
installNano
installPackage htop
installPacaur
installReflektor
configureNTP
installBasicServiceDrivers

installLightdm

if [ inVM=1 ];
then
  printf "${BLUE}Virtual Environment detected${NORMAL}\n"
  installXfce
  installCompiz
  installVirtualBoxext
else
  printf "${BLUE}Bare hardware Environment${NORMAL}\n"
  installCinnamon
fi

installPackage system-config-printer gnome-keyring
configXEnvironment
installMaterialtheme
setPresets

installPackage gedit
installPackage eog
installPackage gnome-calculator
installAurPackage google-chrome
installPackage atom
installPackage jdk8-openjdk
installPackage intellij-idea-community-edition
installAndroidSdk
installAdb
installAurPackage android-studio
installPScripts
installPackage audacious
installPackage vlc qt4

cleanup

printf "${YELLOW}Installed tools!\nPlease re-login to apply the made changes to your shell.\n And restart to see your new desktop environment.${NORMAL}\n"

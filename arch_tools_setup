#!/usr/bin/env bash

silentpacman() {
  sudo pacman --noconfirm $@
}

silentpacaur() {
  pacaur --aur --noconfirm --noedit $@
}

installPackage() {
  printf "${BLUE}Install $@...${NORMAL}\n"
  silentpacman --needed -S $@
}

installAurPackage() {
  printf "${BLUE}Install $@...${NORMAL}\n"
  silentpacaur --needed -y $@
}

installPacaur() {
  printf "${BLUE}Install pacaur...${NORMAL}\n"

  mkdir -p pacaur_install
  cd pacaur_install
  # Install pacaur dependencies from arch repos
  silentpacman -S expac yajl git

  # Install "cower" from AUR
  curl -o PKGBUILD https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=cower
  makepkg PKGBUILD --skippgpcheck
  silentpacman -U cower*.tar.xz

  # Install "pacaur" from AUR
  curl -o PKGBUILD https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=pacaur
  makepkg PKGBUILD
  silentpacman -U pacaur*.tar.xz

  cd ..
  rm -rf pacaur_install
}


installZsh() {
  printf "${BLUE}Install oh-my-zsh with plugins...${NORMAL}\n"
  if [ ! -f .zshrc ]; then
    silentpacman -S zsh zsh-completions
    wget -O oh-my-zsh https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh
    sudo chmod u+x oh-my-zsh
    sed -i "/env\szsh/d" oh-my-zsh

    ./oh-my-zsh
    sed -i "/^ZSH_THEME/s/\".*\"/\"gentoo\"/" ~/.zshrc
    sed -i "/^plugins/s/(.*)/(git sudo adb gradle archlinux history)/" ~/.zshrc
    mkdir bin
    echo "export PATH=$HOME/bin:\$PATH%" | sudo tee ~/.zshenv

    if [ -n "$http_proxy" ]; then
      echo "export http_proxy=$http_proxy" | sudo tee -a /etc/zsh/zshenv
      echo "export https_proxy=$https_proxy" | sudo tee -a /etc/zsh/zshenv
    fi

    #set zsh also for root
    #sudo chsh -s $(grep /zsh$ /etc/shells | tail -1)

    echo "alias sudo='sudo '" | sudo tee -a /etc/zsh/zshenv

    #set alias to prevent official package actions through pacaur.
    #Personal setting
    echo "alias pacaur='pacaur --aur '" | sudo tee -a /etc/zsh/zshenv

    rm -rf oh-my-zsh

  else
    printf "${YELLOW}oh-my-zsh already there, using exiting one.${NORMAL}\n"
  fi
}

installReflektor() {
  printf "${BLUE}Install Reflector...${NORMAL}\n"
  #Reflector for mirrorlist refreshing
  sudo cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bak
  silentpacaur -S reflector-timer-weekly

  echo "Setup german filter for mirrorlist"
  sudo sed -i '/--country/d' /etc/reflector.conf
  echo "--country Germany" | sudo tee -a /etc/reflector.conf

  echo "Enable reflector service"
  sudo systemctl enable reflector.timer
}

installNano(){
  printf "${BLUE}Install nano...${NORMAL}\n"
  silentpacman -S nano
  echo "export EDITOR=usr/bin/nano" | sudo tee -a /etc/zsh/zshenv
}

configureNTP() {
  printf "${BLUE}Install and configure NTP...${NORMAL}\n"
  silentpacman -S ntp

  echo "Set german ntp server."
  sudo sed -i.bak '/server/d' /etc/ntp.conf
  echo "server 0.de.pool.ntp.org" | sudo tee -a /etc/ntp.conf
  echo "server 1.de.pool.ntp.org" | sudo tee -a /etc/ntp.conf
  echo "server 2.de.pool.ntp.org" | sudo tee -a /etc/ntp.conf
  echo "server 3.de.pool.ntp.org" | sudo tee -a /etc/ntp.conf

  echo "Restrict machine from being a ntp server."
  #prevent the machine from being a time server
  sudo sed -i.bak '/restrict/d' /etc/ntp.conf
  echo "restrict default nomodify nopeer" | sudo tee -a /etc/ntp.conf
  echo "restrict 127.0.0.1" | sudo tee -a /etc/ntp.conf

  echo "Enable ntp service"
  sudo systemctl enable ntpd.service

  time=$(date)
  printf "Current time: ${YELLOW}$time${NORMAL}\n"
}

installBasicServiceDrivers() {
  printf "${BLUE}Install basic services and drivers...${NORMAL}\n"
  silentpacman -S acpid cups mesa-libgl

  echo "Enable services"
  sudo systemctl enable acpid.service
  sudo systemctl enable org.cups.cupsd.service
}

installLightdm() {
  printf "${BLUE}Install lightdm and gtk-greeter...${NORMAL}\n"
  silentpacman -S lightdm lightdm-gtk-greeter lightdm-gtk-greeter-settings
  sudo systemctl enable lightdm.service
}

installDesktop() {
  printf "${BLUE}Install Cinnamon...${NORMAL}\n"
  silentpacman -S cinnamon
}

installMaterialtheme(){
  printf "${BLUE}Install Material Look...${NORMAL}\n"
  if [ -z "$(pacman -Qs adapta-gtk-theme)" ]; then
    silentpacaur -S paper-icon-theme-git adapta-gtk-theme ttf-roboto

    gsettings set org.cinnamon.desktop.interface icon-theme 'Paper'
    gsettings set org.cinnamon.desktop.interface cursor-theme "Adapta-Nokto"
    gsettings set org.cinnamon.desktop.interface gtk-theme "Adapta-Nokto"
    gsettings set org.cinnamon.desktop.wm.preferences theme "Adapta-Nokto"
    gsettings set org.cinnamon.theme name "Adapta-Nokto"
    gsettings set org.cinnamon.settings-daemon.plugins.xsettings menus-have-icons "true"

    gsettings set org.cinnamon.desktop.interface font-name "Roboto 9"
    gsettings set org.nemo.desktop font "Roboto 10"
    gsettings set org.gnome.desktop.interface document-font-name "Roboto 11"
    gsettings set org.cinnamon.desktop.wm.preferences titlebar-font "Roboto Bold 11"

    sudo sed -i "/^#user-background/atrue/" /etc/lightdm/lightdm-gtk-greeter.conf
    sudo sed -i "/^#theme-name/aAdapta-Nokto/" /etc/lightdm/lightdm-gtk-greeter.conf
    sudo sed -i "/^#icon-theme-name/aPaper/" /etc/lightdm/lightdm-gtk-greeter.conf
    sudo sed -i "/^#font-name/aRoboto 10/" /etc/lightdm/lightdm-gtk-greeter.conf

    sudo sed -i "/^#user-background/^#//" /etc/lightdm/lightdm-gtk-greeter.conf
    sudo sed -i "/^#theme-name/^#//" /etc/lightdm/lightdm-gtk-greeter.conf
    sudo sed -i "/^#icon-theme-name/^#//" /etc/lightdm/lightdm-gtk-greeter.conf
    sudo sed -i "/^#font-name/^#//" /etc/lightdm/lightdm-gtk-greeter.conf
  fi
}

installVirtualBoxext(){
  echo #
  read -p "Is the system running in a virtualbox environment? [yn] " -r
  echo    # move to a new line
  if [[ $REPLY =~ ^[Yy]$ ]]
  then
    silentpacman -S virtualbox-guest-modules-arch virtualbox-guest-utils
    sudo systemctl enable vboxservice.service
  else
    printf "${YELLOW}Skipping virtualbox additions${NORMAL}\n"
  fi
}

installAndroidSdk() {
  printf "${BLUE}Install Android-SDK...${NORMAL}\n"
  silentpacaur -S android-sdk
  sudo groupadd androidsdk
  sudo gpasswd -a $userName androidsdk
  sudo chown -R :androidsdk /opt/android-sdk/
  sudo chmod -R g+w /opt/android-sdk/
  export ANDROID_HOME=/opt/android-sdk
  echo "export ANDROID_HOME=/opt/android-sdk" | sudo tee -a ~/.zshenv

  if [ -n "$http_proxy" ]; then
    #split address
    proxyAddress=$(echo $http_proxy | tr ":" "\n")
    echo "http.proxyHost=${proxyAddress[0]}" | tee ~/.android/androidtool.cfg
    echo "http.proxyPort=${proxyAddress[1]}" | tee -a ~/.android/androidtool.cfg
  fi

  echo "y" | $ANDROID_HOME/tools/android update sdk --no-ui
}

installAdb() {
  printf "${BLUE}Install ADB...${NORMAL}\n"
  silentpacman -S android-tools
  #sudo gpasswd -a $userName adbusers
}

configXEnvironment() {
  printf "${BLUE}Set german keyboard layout for X...${NORMAL}\n"
  sudo localectl set-x11-keymap de pc105 nodeadkeys

  printf "${BLUE}Enable NetworkManager...${NORMAL}\n"
  sudo systemctl enable NetworkManager.service

  printf "${BLUE}Config visual appearence...${NORMAL}\n"
  gsettings set org.nemo.desktop desktop-layout "true::true"
  gsettings set org.nemo.desktop trash-icon-visible "true"
  gsettings set org.nemo.desktop volumes-visible "true"
  gsettings set org.nemo.desktop show-orphaned-desktop-icons "true"

}

cleanup() {
  printf "${BLUE}Remove unused packages...${NORMAL}\n"
  sudo pacman -Rs $(pacman -Qtdq)

  printf "${BLUE}Remove not needed menu entries...${NORMAL}\n"
  sudo rm /usr/share/applications/qv*.desktop
  sudo sed -e "\$aNoDisplay=true" /usr/share/applications/electron.desktop
}

# Use colors, but only if connected to a terminal, and that terminal
# supports them.
if which tput >/dev/null 2>&1; then
    ncolors=$(tput colors)
fi
if [ -t 1 ] && [ -n "$ncolors" ] && [ "$ncolors" -ge 8 ]; then
  RED="$(tput setaf 1)"
  GREEN="$(tput setaf 2)"
  YELLOW="$(tput setaf 3)"
  BLUE="$(tput setaf 6)"
  BOLD="$(tput bold)"
  NORMAL="$(tput sgr0)"
else
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  BOLD=""
  NORMAL=""
fi

# Only enable exit-on-error after the non-critical colorization stuff,
# which may fail on systems lacking tput or terminfo
set -e

echo "This will install some tools on your system:"
echo "* Creates user and disable root from login"
echo "* pacaur"
echo "* zShell + oh-my-zsh"
echo "* Virtualbox extensions (optional)"
echo "* System tools"
echo "* Desktop Environment"
echo "* Development Environment"

read -p "Are you sure you want that? [yn] " -r
echo    # move to a new line
if [[ ! $REPLY =~ ^[Yy]$ ]]
then
  exit 1
fi

userName=$(whoami)
printf "Current user: ${YELLOW}$userName${NORMAL}\n"
cd ~

ping -q -c2 archlinux.org > /dev/null
if [ $? -eq 0 ]
then
	printf "${GREEN}Internet available${NORMAL}\n"
else
  printf "${RED}No internet available, please check the connectivity and try again!${NORMAL}\n"
  exit 1
fi

echo #
read -p "Is a proxy setup needed?[yn] " -r
echo    # move to a new line
if [[ $REPLY =~ ^[Yy]$ ]]
then
  echo #
  read -p "Enter the address of the proxy:" -r
  echo    # move to a new line
  export http_proxy=$REPLY
  export https_proxy=$REPLY
fi

printf "${RED}It is needed to get root rights for most of the following tasks!${NORMAL}\n"
sudo echo "" > /dev/null

# Temp raise of the /tmp/ folder size to 2GiB
sudo mount -o remount,size=2G,noatime /tmp

printf "${BLUE}Sync packages database...${NORMAL}\n"
silentpacman -Syy

installPacaur
installZsh
installReflektor
installNano
installPackage htop
configureNTP
installBasicServiceDrivers

installLightdm
installDesktop
configXEnvironment
installMaterialtheme
installPackage gnome-terminal

installVirtualBoxext

installPackage gedit
installAurPackage google-chrome
installPackage atom
installPackage jdk8-openjdk
installPackage intellij-idea-community-edition
installAndroidSdk
installAdb
installAurPackage android-studio

cleanup

printf "${YELLOW}Installed tools!\nPlease re-login to apply the made changes to your shell.\n And restart to see your new desktop environment.${NORMAL}\n"
